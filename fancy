#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long qw( GetOptionsFromString );
my $Delay     = 0;
my $Timestamp = 0;
my $Count     = 1;
my $Width     = `tput cols`;
my $Height    = `tput lines`;
my $Winch     = undef;
local $SIG{WINCH} = sub { $Winch = 1 };

if ( @ARGV and $ARGV[0] =~ m{^-} ) {
    my $arg = shift @ARGV;
    $arg =~ s{^-(\w)([^=]+)}{-$1=$2};
    $arg .= q{=} . shift @ARGV if ( @ARGV and $arg !~ m{=} );
    my $r = GetOptionsFromString( $arg, 'n=i' => \$Delay );
    die "Usage: fancy [ -n <seconds> ] [ <command> ]\n" if ( not $r );
}

print "\e[H\e[2J";

if (@ARGV) {
    while (1) {
        my $fh = undef;
        open $fh, q{-|}, @ARGV or die;
        $Delay ||= 2;
        $Timestamp = 0;
        $Count     = 1;
        draw($fh);
        close $fh or die $!;
        sleep $Delay;
    }
}
else {
    my $fh = *STDIN;
    $Delay ||= 900;
    draw($fh);
}

sub draw {
    my $fh = shift;
    while ( my $line = <$fh> ) {
        clear($line) or next;
        my $color = undef;
        if ( $line =~ m{ERROR:} ) {
            $color = "\e[30;101m";
        }
        elsif ( $line =~ m{WARNING:} ) {
            $color = "\e[30;103m";
        }
        elsif ( $line =~ m{INFO:|DEBUG:|systemd[[]} ) {
            $color = "\e[90m";
        }
        elsif ( $line =~ m{auth|ssh|sftp}i ) {
            $color = "\e[92m";
        }
        elsif ( $line =~ m{fail|error}i ) {
            $color = "\e[91m";
        }
        elsif ( $line =~ m{warning}i ) {
            $color = "\e[93m";
        }
        else {
            $color = "\e[0m";
        }
        if ( not @ARGV or $Count > 1 ) {
            chomp $line;
            print $color, $line, "\e[0m\n";
        }
        else {
            print $line;
        }
    }
    return;
}

sub clear {
    my $line  = shift;
    my $clear = undef;
    my $rv    = 1;
    my $now   = time;
    if ($Winch) {
        $Winch  = undef;
        $Width  = `tput cols`;
        $Height = `tput lines`;
    }
    my $span = int( length($line) / $Width + 1 );
    $Count += $span;
    if (@ARGV) {
        if ( not $Timestamp ) {
            $clear = 1;
        }
        else {
            $rv = undef if ( $Count >= $Height );
        }
    }
    elsif ( $now - $Timestamp > $Delay or $Count >= $Height ) {
        $clear = $now - $Timestamp;
    }
    if ($clear) {
        print "\e[H";
        if ( not @ARGV ) {
            print "\e[2J";
            if ( $Count < $Height ) {
                my $half = ( $Height - $Count ) / 2;
                print "\n" x $half;
                $span += $half;
            }
        }
        $Count     = $span;
        $Timestamp = $now;
    }
    return $rv;
}
